# V3.04
# Calling conventions:
#     %rdi, %rsi, %rdx, %rcx, %r8, %r9, %r10, %r11 and %rax are caller saved
#     %rbx, %rbp, %r12, %r13, %r14 are callee saved
#     %rsp can not be used except for its normal use as a stack pointer.
#     argument are passed through registers %rdi, %rsi, %rdx in this order.
#     values are returned through %rax

.pos 0x100

main:
	irmovq bottom,  %rsp     # initialize stack
	irmovq array, %rdi       # %rdi = pointer to first element of the array
	xorq   %rax, %rax        # %rsi = size
	mrmovq size(%rax), %rsi
	irmovq $1, %rax          # %rsi = size - 1
	subq   %rax, %rsi
	addq   %rsi, %rsi        # %rsi = 8 * (size - 1)
	addq   %rsi, %rsi
	addq   %rsi, %rsi
	addq   %rdi, %rsi        # %rsi = pointer to last element of the array.
	call   mergesort
	halt

#
# Mergesort
#    %rdi: pointer to the first element of the range to sort.
#    %rsi: pointer to the last element of the range to sort.
#
mergesort:                          # Recursive V3.01. Pair with merge() V3.04
#    %rdi: pointer to the first element of the range to sort.
#    %rsi: pointer to the last element of the range to sort.
    # Calculate mid point. They are pointers, so andq -8 is a must
    pushq  %r12
    
    rrmovq %rdi, %r12               # r12 = first
    irmovq $2,   %rax               # constant 2
    irmovq $-8,  %r11               # constant -8
    addq   %rsi, %r12               # r12 = first + last

    pushq  %rbp
    rrmovq %rsi, %rbp               # Make a copy of last (rsi) in rbp
    
    divq   %rax, %r12               # r12 = first + last / 2
    andq   %r11, %r12               # Chop last 3 bits, now r12 is mid

    pushq  %rbx
    rrmovq %rdi, %rbx               # Make a copy of start (rdi) in rbx

    rrmovq %r12, %r8                # r8 = mid
    subq   %rdi, %r8                # r8 = mid - start
    jg     sort_left                # If mid > start, go sort left half

    rrmovq %r12, %rdi               # rdi = mid
    rrmovq %r12, %r8                # r8 = mid
    subq   %r11, %rdi               # rdi = mid + 1
    subq   %r11, %r8                # r8 = mid + 1
    subq   %rbp, %r8                # r8 = mid + 1 - last
    jl     sort_right               # If mid + 1 < last, go sort right half

prep_merge:                         # Inner fall-through, both sorted, prep merging
    rrmovq %rbx, %rdi               # Copy start (rbx) as the first (rdi) for merge()
    popq   %rbx                     # Restore registers
    rrmovq %rbp, %rsi               # Copy last (rbp) as the end (rsi) for merge()
    rrmovq %r12, %rdx               # Copy mid (r12) as the mid (rdx) for merge()

    # Restore registers
    popq   %rbp
    popq   %r12

    # Merge the sorted halves
    jmp    merge

sort_left:                          # mergesort(first, mid)
    # first (rdi) is the first (rdi) for the right half, already there
    rrmovq %r12, %rsi               # mid (r12) is the last (rsi) for the left half
    call   mergesort

    rrmovq %r12, %r8                # r8 = mid
    rrmovq %r12, %rdi
    subq   %r11, %r8                # r8 = mid + 1
    subq   %r11, %rdi               # rdi = mid + 1
    subq   %rbp, %r8                # r8 = (mid + 1) - last 
    jge    prep_merge               # If mid + 1 >= last, go to prep_merge

sort_right:                         # mergesort(mid+1, last)
    # mid + 1 (rdi) is the first (rdi) for the right half, already done
    rrmovq %rbp, %rsi               # last (rbp) is the last (rsi) for the right half
    call   mergesort
    jmp    prep_merge               # Both sorted, go to prep_merge

init_check:                         # Outer fall-through, continue or ret
    # Check if the range has more than one element
    rrmovq %rsi, %r8                # r8 = rsi
    subq   %rdi, %r8                # r8 = rsi (last) - rdi (first)
    jg    mergesort                 # If last > first, go to main part
    
    ret                             # If last <= first, all done

#
# Merge (equivalent to `merge(first, mid, last)`)
#    %rdi: pointer to the first element of the range to merge.
#    %rsi: pointer to the last element of the range to merge.
#    %rdx: pointer to the middle element of the range to merge.
#
merge:                      # V3.04. Args: rdi is first, rsi is last, rdx is mid
    #irmovq $8, %r11        # constant, obsolete. Now reusing r11=$-8 in mergesort()
    rrmovq %rdx, %rax       # Optz setup rax
    rrmovq %rdx, %r9        # Optz setup temp register
    
    pushq %r13              # Optz save register
    
    rrmovq %rdi, %r8        # r8 = first, this gonna be current first
    subq %r11, %rax         # rax = mid + 1, this gonna be current second
    irmovq temp, %rcx       # rcx = temp, this gonna be current ptr in temp
        
    subq %rdi, %r9          # compare mid and first (rdx - rdi)
    jge  compare            # if mid >= first, no leftovers, go to compare
    jmp copy_fst_pre        # if not, go copy first half leftovers

fst_smaller:                # Set up correct ele for copying
    subq %r11, %r8          # increment current first
    rrmovq %r10, %r9        # r9 should be smaller one, so = *first
copy_smaller:               # copy *dest++ = *first++ or = *second++
    rrmovq %r8, %r13        # Optz, for comparison
    rmmovq %r9, -8(%rcx)    # store the "smaller" element to temp

    subq %rdx, %r13         # compare first - mid
    jg check_29             # if first > mid, go check second half

compare:                    # compare and merge elements
    rrmovq %rsi, %r13
    subq %rax, %r13         # compare last and second (rsi - rax)
    jl copy_fst_pre         # if last < second, second half depleted, go check first

    mrmovq (%r8), %r10      # r10 = *first
    mrmovq (%rax), %r9      # r9 = *second
    subq %r11, %rcx         # increment dest pointer (dest++)

    rrmovq %r10, %r13
    subq %r9, %r13          # compare *first - *second
    jle fst_smaller         # if *first <= *second, first half is "smaller", go copy *first
    subq %r11, %rax         # if not, increment current second
    jmp copy_smaller        # go copy *second

copy_scd_loop:              # copy second half
    mrmovq (%rax), %r10     # load element from second half
    subq %r11, %rax         # increment second half pointer
    rmmovq %r10, (%rcx)     # copy to temp
    subq %r11, %rcx         # increment temp pointer

check_29:                   # check if can copy back to the original array
    rrmovq %rsi, %r13
    subq %rax, %r13         # compare last - second
    jge copy_scd_loop       # if last >= second, dispatch to copy second half
                            # if not, both halves copied, do outer check    
    rrmovq %rsi, %r13
    subq %rdi, %r13         # compare init last (rsi) - initial_first (rdi)
    jl merge_done           # if init last < initial_first, empty, done
                            # if not, prep copy back
    subq %rdi, %rsi         # rsi = init last - initial_first, num of ele in bytes
    irmovq temp, %r9
    irmovq temp, %rcx       # rcx = temp again
    rrmovq %rdi, %rax       # rax = initial_first, gonna be current ptr in original array
    addq %rsi, %r9          # r9 = temp + num of ele = terminal dest
copy_bk_loop:               # Loop part of check_29, copying everyone back
    mrmovq (%rcx), %r10     # load current ele from temp
    subq %r11, %rax         # increment current ptr in original array
    subq %r11, %rcx         # increment current ptr in temp
    
    rrmovq %r9, %r13        # Optz, for comparison
    rmmovq %r10, -8(%rax)   # copy to original array

    subq %rcx, %r13         # Compare terminal dest (r9) - current ptr (rcx)
    jge copy_bk_loop        # if terminal dest >= current ptr, loop
    jmp merge_done          # if terminal dest < current ptr, all done

copy_fst_pre:               # copy first half prep
    rrmovq %r8, %r13
    subq %rdx, %r13         # compare first (r8) - mid (rdx)
    jg check_29             # if first > mid, go check second half
    rrmovq %rcx, %r9        # if not, prepare to copy leftovers, r9 = temp
copy_fst_8:                 # loop part of copy_fst_pre
    mrmovq (%r8), %r10      # load element *first
    subq %r11, %r8          # inc ptr in first half
    subq %r11, %r9          # inc ptr in temp
    
    rrmovq %r8, %r13        # Optz, for comparison
    rmmovq %r10, -8(%r9)    # copy to temp

    subq %rdx, %r13         # compare first (r8) - mid (rdx)
    jle copy_fst_8          # if first <= mid, more elements to copy, loop
                            # if not, prep to check second half
    
    jmp check_29            # Go check second half

merge_done:
    popq %r13
    ret
    

#
# Array to sort
#
.pos 0x1000
array:
	.quad	0x41953		  # 268627
	.quad	0x6d6bc		  # 448188
	.quad	0xb69e1		  # 748001
	.quad	0xd8016		  # 884758
	.quad	0x9b7c0		  # 636864
	.quad	0xf42be		  # 1000126
	.quad	0x3752d		  # 226605
	.quad	0x42c87		  # 273543
	.quad	0xcacd1		  # 830673
	.quad	0x53978		  # 342392
	.quad	0x14e88		  # 85640
	.quad	0x79fa2		  # 499618
	.quad	0x834b1		  # 537777

#
# Temporary array.
#
temp:   .quad 0,13


#	
# Array size.
#	
size:   .quad 13
	
#
# Stack (32 sixty-four bit words is more than enough here).
#
.pos 0x3000
top:	            .quad 0x00000000,0x20     # top of stack.
bottom:             .quad 0x00000000          # bottom of stack.
