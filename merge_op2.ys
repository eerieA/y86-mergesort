merge:                             # V2.01
    pushq  %rbp                    # Save initial dest
    pushq  %rbx                    # Save initial ???, by calling convention
    pushq  %r12                    # Callee-saved - will hold last
    pushq  %r13                    # Callee-saved - will hold mid
    pushq  %rdi                    # Save initial first pointer
    
    irmovq $8,   %r8               # Constant 8 for pointer arithmetic
    
    # Initialize second pointer (j)
    rrmovq %rdx, %rcx              # mid -> rcx
    irmovq temp, %rbp              # Load temp array address early
    addq   %r8, %rcx               # second = mid + 1
    
    # Store bounds in callee-saved registers
    rrmovq %rdx, %r13              # Store mid in r13
    rrmovq %rsi, %r12              # Store last in r12
    
    # Pre-load values for first comparison
    mrmovq 0(%rdi), %r9            # Pre-load A[i]
    mrmovq 0(%rcx), %r10           # Pre-load A[j]
    
    # Initial bounds check (optimize common case)
    rrmovq %r13, %rax    
    subq   %rdi, %rax              # mid(%r13) - first(%rdi)? Mostly >= 0
    jl     prepare_mergeloop2      # Rarely < 0, forward not taken is good
    
    rrmovq %r12, %rax
    subq   %rcx, %rax              # last(%r12) - second(%rcx)? Mostly >= 0
    jl     prepare_mergeloop2      # Rarely < 0, forward not taken is good

main_merge_loop:
    # Compare pre-loaded values
    rrmovq %r9, %rax               
    subq   %r10, %rax              # A[i] - A[j]? ~ 50-50%
    jge    store_second            # If A[i] >= A[j], store A[j] (smaller)
    
store_first:                       # Store A[i] (smaller)
    rmmovq %r9, 0(%rbp)            
    addq   %r8, %rdi
    
    # Quick bounds check using dedicated register
    rrmovq %r13, %rax
    addq   %r8, %rbp               # Inc dest
    subq   %rdi, %rax              # mid(%r13) - first(%rdi)? Mostly >= 0
    jge    load_first_continue     # Mostly >= 0, backward taken
    jmp    prepare_mergeloop2      # Rarely < 0, fall through

load_first_continue:
    mrmovq 0(%rdi), %r9            # Pre-load next A[i]
    jmp    main_merge_loop         # Back to main loop

store_second:                      # Store A[j] (smaller)
    rmmovq %r10, 0(%rbp)           
    addq   %r8, %rcx
    
    # Quick bounds check using dedicated register
    rrmovq %r12, %rax
    addq   %r8, %rbp               # Inc dest
    subq   %rcx, %rax              # last(%r12) - second(%rcx)? Mostly >= 0
    jge    load_second_continue    # Mostly >= 0, backward taken
    jmp    prepare_mergeloop2      # Rarely < 0, fall through

load_second_continue:
    mrmovq 0(%rcx), %r10           # Pre-load next A[j]
    jmp    main_merge_loop

prepare_mergeloop2:
    # Handle leftovers from first half
    rrmovq %r13, %rsi              # Setup args for copy: mid -> last pointer
    rrmovq %rbp, %rdx              # temp -> dest pointer
    call   copy
    rrmovq %rax, %rbp              # Save new temp pointer
    
    # Handle leftovers from second half
    rrmovq %rcx, %rdi              # second -> first pointer
    rrmovq %r12, %rsi              # Use last from r12
    call   copy
    rrmovq %rax, %rbp              # Save final temp pointer
    
    # Copy everything back to original array
    popq   %rdi                    # Restore initial first pointer
    
    # Setup final copy
    pushq  %rdi                    # Save initial `first` again
    rrmovq %r12, %rsi              # Use last from r12. So no need to push %rsi, and %rsi not scrathed by copy()
    subq   %rdi, %rsi              # %rsi = `last` - initial `first`
    rrmovq %rdi, %rdx              # Original array as destination
    irmovq temp, %rdi              # `temp` points to the first ele for copy()
    addq   %rdi, %rsi              # `temp` + `last` - initial `first` has the last ele for copy()
    
    call   copy
    
    # Cleanup and return
    popq   %rdi                    # Restore initial `first`
    popq   %r13                    # Restore callee-saved
    popq   %r12                    # Restore callee-saved
    popq   %rbx                    # Restore callee-saved
    popq   %rbp                    # Restore callee-saved
    ret

#
# Copy helper. Optimized to scratch and use caller-saved reg r11
#    %rdi [input]: pointer to the first element to copy.
#    %rsi [input]: pointer to the last element to copy.
#    %rdx [input & output]: pointer to where the elements go.
# 
copy:
    irmovq $8, %r8                 # Pre-load constant 8
    
    rrmovq %rsi, %rax              # Prepare for comparison
    subq   %rdi, %rax              # Sets condition codes
    jl     copyend                 # Taken if first > last
    
copycontinue:
    mrmovq (%rdi), %rax            # Load value from source
    
    addq   %r8, %rdi               # Update pointers while load is happening
    addq   %r8, %rdx
    
    rrmovq %rsi, %r11              # Use caller-saved r11 for comparison
    rmmovq %rax, -8(%rdx)          # Store loaded value
    subq   %rdi, %r11              # Sets condition codes
    jge    copycontinue            # Loop if more elements
    
copyend:
    rrmovq %rdx, %rax              # Return final destination pointer
    ret