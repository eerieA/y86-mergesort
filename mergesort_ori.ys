#
# Calling conventions:
#     %rdi, %rsi, %rdx, %rcx, %r8, %r9, %r10, %r11 and %rax are caller saved
#     %rbx, %rbp, %r12, %r13, %r14 are callee saved
#     %rsp can not be used except for its normal use as a stack pointer.
#     argument are passed through registers %rdi, %rsi, %rdx in this order.
#     values are returned through %rax

.pos 0x100

main:
	irmovq bottom,  %rsp     # initialize stack
	irmovq array, %rdi       # %rdi = pointer to first element of the array
	xorq   %rax, %rax        # %rsi = size
	mrmovq size(%rax), %rsi
	irmovq $1, %rax          # %rsi = size - 1
	subq   %rax, %rsi
	addq   %rsi, %rsi        # %rsi = 8 * (size - 1)
	addq   %rsi, %rsi
	addq   %rsi, %rsi
	addq   %rdi, %rsi        # %rsi = pointer to last element of the array.
	call   mergesort
	halt

#
# Mergesort
#    %rdi: pointer to the first element of the range to sort.
#    %rsi: pointer to the last element of the range to sort.
#
mergesort:
	rrmovq %rsi, %rax  	    # is first < last ?
	subq   %rdi, %rax
	jle    done             # if not, done.

	rrmovq %rdi, %rdx       # %rdx = mid. Note the use  of ANDQ.
	addq   %rsi, %rdx       # Since we're doing arithmetic  with
	irmovq $2,   %rax       # pointers, we can not rely only  on
	divq   %rax, %rdx       # integer division to ensure  we get
	irmovq $-8,  %rax       # a valid pointer.
	andq   %rax, %rdx       

	pushq  %rdi
	pushq  %rsi             
	pushq  %rdx             
	rrmovq %rdx, %rsi       # mergesort(first, mid)
	call   mergesort
	popq   %rdx
	popq   %rsi
	popq   %rdi
    
	pushq  %rdi             # mergesort(mid+1, last)
	pushq  %rsi             
	pushq  %rdx 
	rrmovq %rdx, %rdi
	irmovq $8, %rax
	addq   %rax, %rdi
	call   mergesort
	popq   %rdx
	popq   %rsi
	popq   %rdi

	call   merge            # merge(first, mid, last)

done:	ret

#
# Merge (equivalent to `merge(first, mid, last)`)
#    %rdi: pointer to the first element of the range to merge.
#    %rsi: pointer to the last element of the range to merge.
#    %rdx: pointer to the middle element of the range to merge.
#
# %rdi is i (starts from initial `first`)
# %rcx is j (starts from `last`)
# %rdx is mid
# %rsi is last
# %rbp is dest

merge:
	pushq  %rbp
	pushq  %rbx
	pushq  %rdi
	rrmovq %rdx, %rcx
	irmovq $8,   %rax
	addq   %rax, %rcx          # second = mid + 1
	irmovq temp, %rbp
    
mergeloop1:	
	rrmovq %rdx, %rax          # while (i <= mid && j <= last)
	subq   %rdi, %rax          # first > mid ?
	jl     mergeloop2		   # If so, exit to handle leftovers
	
	rrmovq %rsi, %rax
	subq   %rcx, %rax          # second > last ?
	jl     mergeloop2		   # If so, exit to handle leftovers

	mrmovq 0(%rdi), %rax       # If outer loop not exit, %rax = A[i]
	mrmovq 0(%rcx), %rbx   	   # %rbx = A[j]
	subq   %rax, %rbx          # if A[i] <= A[j] (*first <= *second)
	jl     mergecopy2

	rmmovq %rax, 0(%rbp)       # Copy A[i] ("smaller" one) to temp
	irmovq $8, %rax
	addq   %rax, %rbp
	addq   %rax, %rdi
	jmp    mergeloop1

mergecopy2:                    # Copy the second half into temp first
	mrmovq 0(%rcx), %rbx       # %rbx = A[j] again
	rmmovq %rbx, 0(%rbp)
	irmovq $8, %rax
	addq   %rax, %rbp
	addq   %rax, %rcx
	jmp    mergeloop1

mergeloop2:                   # Merge leftovers and copy back to ori array
	pushq  %rdx               # Save `mid` to stack
	pushq  %rsi               # Save `last`
	rrmovq %rdx, %rsi         ## Copy A[i] ... A[mid] to temp. `mid` has the last ele for copy()
	rrmovq %rbp, %rdx         # `temp` is dest (And %rdi = `first` has the first ele)
	call   copy
	rrmovq %rax, %rbp
	popq   %rsi
	popq   %rdx

    pushq  %rdx               ## Copy A[j] ... A[last] to temp. Save `mid` to stack.
	pushq  %rsi               # Save `last`. The last ele for copy()
	rrmovq %rcx, %rdi         # Current `second` equals the first ele for copy()
	rrmovq %rbp, %rdx
	call   copy
	rrmovq %rax, %rbp
	popq   %rsi               # Recover `last`
	popq   %rdx               # Recover `mid`
	
	popq   %rdi               # Recover initial `first`
	
	pushq  %rdi               ## Copy temp back to A[first] ... A[last]. Save initial `first` again
	pushq  %rsi	              # Save `last`
	subq   %rdi, %rsi         # %rsi = `last` - initial `first`
	rrmovq %rdi, %rdx
	irmovq temp, %rdi         # `temp` points to the first ele for copy()
	addq   %rdi, %rsi         # `temp` + `last` - initial `first` has the last ele for copy()
	call   copy
	popq   %rsi               # Recover `last`
	popq   %rdi               # Recover initial `first`

	popq   %rbx
	popq   %rbp
	ret

#
# Copy helper.
#    %rdi [input]: pointer to the first element to copy.
#    %rsi [input]: pointer to the last element to copy.
#    %rdx [input & output]: pointer to where the elements go.
#	
copy:	
	rrmovq %rsi, %rax
	subq   %rdi, %rax
	jge     copycontinue
	
	rrmovq %rdx, %rax
	ret
	
copycontinue:
	mrmovq 0(%rdi), %rax
	rmmovq %rax, 0(%rdx)

	irmovq $8, %rax
	addq   %rax, %rdx
	addq   %rax, %rdi
	jmp    copy


#
# Array to sort
#
.pos 0x1000
array:
	.quad	0x41953		  # 268627
	.quad	0x6d6bc		  # 448188
	.quad	0xb69e1		  # 748001
	.quad	0xd8016		  # 884758
	.quad	0x9b7c0		  # 636864
	.quad	0xf42be		  # 1000126
	.quad	0x3752d		  # 226605
	.quad	0x42c87		  # 273543
	.quad	0xcacd1		  # 830673
	.quad	0x53978		  # 342392
	.quad	0x14e88		  # 85640
	.quad	0x79fa2		  # 499618
	.quad	0x834b1		  # 537777

#
# Temporary array.
#
temp:   .quad 0,13


#	
# Array size.
#	
size:   .quad 13
	
#
# Stack (32 sixty-four bit words is more than enough here).
#
.pos 0x3000
top:	            .quad 0x00000000,0x20     # top of stack.
bottom:             .quad 0x00000000          # bottom of stack.

