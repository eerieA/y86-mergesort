mergesort:                          # Recursive V4.02
    rrmovq %rsi, %rax
    subq   %rdi, %rax               # rax = rsi (last) - rdi (first)
    jg     ms_main                  # If last > first, go to main part
    ret                             # If last <= first, all done

ms_main:
    # Save registers
    pushq  %r12
    rrmovq %rdi, %r12               # r12 = first

    # Calc mid point.
    irmovq $2,   %rax
    addq   %rsi, %r12               # r12 = first + last
    irmovq $-8,  %r11
    pushq  %rbp                     # optimize
    divq   %rax, %r12               # r12 = first + last / 2
    
    rrmovq %rsi, %rbp               # Copy last in rbp
    
    # Calc mid point cont. They are pointers, so andq -8 is a must.
    andq   %r11, %r12               # Chop last 3 bits, now r12 is mid
    
    pushq  %rbx                     # optimize
    rrmovq %rdi, %rbx               # Copy first in rbx

    # Sort left half.               # rdi is already the correct start
    rrmovq %r12, %rsi               # rsi = mid, for mergesort(first, mid)
    call   mergesort

    # Sort right half.
    rrmovq %r12, %rdi
    rrmovq %rbp, %rsi               # rsi = last
    subq   %r11, %rdi               # rdi = mid + 1, for mergesort(mid+1, last)
    call   mergesort

    # Merge the sorted halves
    rrmovq %r12, %rdx               # rdx = mid, for merge()
    rrmovq %rbp, %rsi               # rsi = last, for merge()
    rrmovq %rbx, %rdi               # rdi = first, for merge()
    jmp    merge                    # Tail call optz
    merge_end:

    popq   %rbx
    popq   %rbp
    popq   %r12
    ret