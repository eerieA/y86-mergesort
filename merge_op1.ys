merge:                             # V1.02
    pushq  %rbp                    # Save initial dest
    pushq  %rbx                    # Save initial ???, by calling convention
    pushq  %rdi                    # Save initial first pointer
    
    irmovq $8,   %r8               # Constant 8 for pointer arithmetic
    irmovq temp, %rbp              # Load temp array address early
    
    # Initialize second pointer (j)
    rrmovq %rdx, %rcx              # mid -> rcx
    addq   %r8, %rcx               # second = mid + 1
    
    # Pre-load values for first comparison
    mrmovq 0(%rdi), %r9            # Pre-load A[i]
    mrmovq 0(%rcx), %r10           # Pre-load A[j]
    
    # Initial bounds check (optimize common case)
    rrmovq %rdx, %rax    
    subq   %rdi, %rax              # mid(%rdx) - first(%rdi)? Mostly >= 0
    jl     prepare_mergeloop2      # Rarely < 0, forward not taken is good
    
    rrmovq %rsi, %rax
    subq   %rcx, %rax              # last(%rsi) - second(%rcx)? Mostly >= 0
    jl     prepare_mergeloop2      # Rarely < 0, forward not taken is good

main_merge_loop:                   # Main loop at the top, backward branch
    # Compare pre-loaded values
    rrmovq %r9, %rax               
    rrmovq %r10, %rbx              
    subq   %rbx, %rax              # A[i] - A[j]? ~ 50-50%
    jge    store_second            # If A[i] >= A[j], store A[j] (smaller)
    
store_first:                       # Store A[i] (smaller)
    rmmovq %r9, 0(%rbp)            
    addq   %r8, %rbp
    addq   %r8, %rdi
    mrmovq 0(%rdi), %r9            # Pre-load next A[i]
    
    # Check i bounds inline
    rrmovq %rdx, %rax    
    subq   %rdi, %rax              # mid(%rdx) - first(%rdi)? Mostly >= 0
    jge    main_merge_loop         # Mostly >= 0, backward taken
    jmp    prepare_mergeloop2      # Rarely < 0, fall through

store_second:                      # Store A[j] (smaller)
    rmmovq %r10, 0(%rbp)           
    addq   %r8, %rbp
    addq   %r8, %rcx
    mrmovq 0(%rcx), %r10           # Pre-load next A[j]
    
    # Check j bounds inline
    rrmovq %rsi, %rax
    subq   %rcx, %rax              # last(%rsi) - second(%rcx)? Mostly >= 0
    jge    main_merge_loop         # Mostly >= 0, backward taken
    jmp    prepare_mergeloop2      # Rarely < 0, fall through

prepare_mergeloop2:
    # Save registers before handling leftovers
    pushq  %rdx                    # Save mid
    pushq  %rsi                    # Save last

    # Handle leftovers from first half
    rrmovq %rdx, %rsi              # Setup args for copy: mid -> last pointer
    rrmovq %rbp, %rdx              # temp -> dest pointer
    call   copy
    rrmovq %rax, %rbp              # Save new temp pointer

    # Handle leftovers from second half
    rrmovq %rcx, %rdi              # second -> first pointer
    popq   %rsi                    # Restore last pointer
    pushq  %rsi                    # Save it again for later
    call   copy
    rrmovq %rax, %rbp              # Save final temp pointer
    
    # Copy everything back to original array
    popq   %rsi                    # Restore last pointer
    popq   %rdx                    # Restore mid pointer
    popq   %rdi                    # Restore initial first pointer
    
    # Setup final copy
    pushq  %rdi                    # Save initial `first` again
    pushq  %rsi                    # Save `last`
    subq   %rdi, %rsi              # %rsi = `last` - initial `first`
    rrmovq %rdi, %rdx              # Original array as destination
    irmovq temp, %rdi              # `temp` points to the first ele for copy()
    addq   %rdi, %rsi              # `temp` + `last` - initial `first` has the last ele for copy()
    
    call   copy
    
    # Cleanup and return
    popq   %rsi                    # Restore `last`
    popq   %rdi                    # Restore initial `first`
    popq   %rbx                    # Restore initial ???, by calling convention
    popq   %rbp                    # Restore initial `dest`
    ret